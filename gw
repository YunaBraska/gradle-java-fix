#!/usr/bin/env sh
# Another gradle wrapper...
# TECHNOLOGY: POSIX Plain SH
# CREATED BY: Yuna Morgenstern (https://github.com/YunaBraska/gradle-java-fix)
set -e
IFS='|'
DEBUG=$(echo "$@" | grep -qw -e "-d" -e "-w" -e "-s" -e "-S" && echo "true" || echo "false")
HOME_DIR=$(eval echo ~)
CURRENT_DIR=$(pwd)
JAVA_ROOT_DIRS="${HOME_DIR}/.jdk|${HOME_DIR}/Library/Java/JavaVirtualMachines|/Library/Java/JavaVirtualMachines|/usr/lib/jvm|/usr/java|C:\Program Files\Java|C:\Program Files (x86)\Java"

########## FUNCTIONS START ##########
debug() {
  if [ "${DEBUG}" = "true" ] && [ -n "${1}" ]; then
    echo "[DEBUG] $(date +"%H:%M") ${1}"
  fi
}

update() {
  URL="https://raw.githubusercontent.com/YunaBraska/gradle-java-fix/main/gw"
  debug "URL [${URL}]"
  CURRENT_SCRIPT="$(readlink -f "$0")"
  debug "CURRENT_SCRIPT [${CURRENT_SCRIPT}]"
  CURRENT_SCRIPT_DIR="$(dirname "$CURRENT_SCRIPT")"
  debug "CURRENT_SCRIPT_DIR [${CURRENT_SCRIPT_DIR}]"
  LAST_UPDATE_FILE="${CURRENT_SCRIPT_DIR}/.gradle/last_update.gw"
  debug "LAST_UPDATE_FILE [${LAST_UPDATE_FILE}]"
  mkdir -p "$(dirname "${LAST_UPDATE_FILE}")"

  if [ -e "${LAST_UPDATE_FILE}" ]; then
    LAST_UPDATE=$(cat "${LAST_UPDATE_FILE}")
  else
    LAST_UPDATE=0
  fi

  debug "LAST_UPDATE [${LAST_UPDATE}]"
  CURRENT_TIME=$(date +%s)
  debug "CURRENT_TIME [${CURRENT_TIME}]"
  LAST_UPDATE_IN_DAYS=$(((CURRENT_TIME - LAST_UPDATE) / 60 / 60 / 24))
  # Check if it's been more than a week since the last update
  if [ ${LAST_UPDATE_IN_DAYS} -gt 7 ]; then
    debug "--------------------"
    debug "SCRIPT_UPDATE [start] on CURRENT_SCRIPT ${CURRENT_SCRIPT} LAST_UPDATE_IN_DAYS [${LAST_UPDATE_IN_DAYS}]"
    TEMP_FILE=$(mktemp)
    debug "TEMP_FILE [${TEMP_FILE}]"
    if curl -s -o "${TEMP_FILE}" "${URL}"; then
      cat "${TEMP_FILE}" >"${CURRENT_SCRIPT}"
      echo "${CURRENT_TIME}" >"${LAST_UPDATE_FILE}"
      debug "SCRIPT_UPDATE [done] - restarting ${CURRENT_SCRIPT}"
      debug "--------------------"
      GW_UPDATE="false" ${CURRENT_SCRIPT} "$@"
      exit 0
    else
      echo "[WARN] SCRIPT_UPDATE [failed] ad download [${URL}] on CURRENT_SCRIPT [${CURRENT_SCRIPT}]. Use '-w' to see more information"
    fi
    rm -rf "${TEMP_FILE}"
  else
    debug "SCRIPT_UPDATE [skipped] - LAST_UPDATE_IN_DAYS [${LAST_UPDATE_IN_DAYS}] is not greater than [7]"
    debug "--------------------"
  fi
}

read_JAVA_PATHS() {
  #FIND INSTALLED JAVA PATHS
  JAVA_PATHS=""
  for dir in ${JAVA_ROOT_DIRS}; do
    if [ -d "${dir}" ]; then
      for sub_dir in "${dir}"/*/; do
        if [ -d "${sub_dir}Contents/Home" ] || [ -d "${sub_dir}/Contents/Home" ]; then
          JAVA_PATHS="$JAVA_PATHS|$sub_dir"
          debug "FOUND JAVA_PATH [${sub_dir}]"
        fi
      done
    else
      debug "INVALID JAVA_PATH [${dir}]"
    fi
  done
  ### START VALIDATION [JAVA_PATHS]
  if [ -z "${JAVA_PATHS}" ]; then
    echo "Could not find any installed JAVA_PATH in JAVA_ROOT_DIRS [${JAVA_ROOT_DIRS}]"
    exit 2
  else
    debug "JAVA_PATHS [$(echo "${JAVA_PATHS}" | grep -o '|' | wc -l | tr -d ' ')]"
  fi
  ### EMD VALIDATION [JAVA_PATHS]
}

find_GRADLE_FILE() {
  # FIND GRADLE BUILD FILE
  GRADLE_FILE=$(find . -maxdepth 1 -name "build.gradle*" -type f -print | head -n 1)
  ### START VALIDATION [GRADLE_FILE]
  if [ -z "${GRADLE_FILE}" ]; then
    echo "Could not find a GRADLE_FILE in CURRENT_DIR [${CURRENT_DIR}]"
    exit 2
  else
    debug "GRADLE_FILE [${GRADLE_FILE}]"
  fi
  ### EMD VALIDATION [GRADLE_FILE]
}

find_G_JAVA_VERSION() {
  # FIND JAVA VERSION IN BUILD FILE
  G_JAVA_VERSION=$(grep -E "sourceCompatibility|targetCompatibility" "${GRADLE_FILE}" | head -n1)
  ### KTS [G_JAVA_VERSION]
  if [ -z "${G_JAVA_VERSION}" ]; then
    G_JAVA_VERSION=$(grep -E "JavaLanguageVersion.of" "${GRADLE_FILE}" | head -n1)
  fi
  # EXTRACT NUMBER
  G_JAVA_VERSION=$(echo "${G_JAVA_VERSION}" | grep -o -E '[0-9]+([._][.0-9])*' || echo "")
  # OPTIONAL TRIM
  G_JAVA_VERSION=$(echo "${G_JAVA_VERSION}" | tr '_' '.' | tr -d ' ' | tr -s ' ')
  ### START VALIDATION [G_JAVA_VERSION]
  if [ -z "${G_JAVA_VERSION}" ]; then
    echo "Could not find a G_JAVA_VERSION in GRADLE_FILE [${GRADLE_FILE}] is 'sourceCompatibility' or 'targetCompatibility' or 'JavaLanguageVersion.of' set?"
    exit 2
  fi
  G_JAVA_VERSION_ALT="${G_JAVA_VERSION##*.}"
  debug "G_JAVA_VERSION [${G_JAVA_VERSION}]"
  debug "G_JAVA_VERSION_ALT [${G_JAVA_VERSION_ALT}]"
  ### EMD VALIDATION [GRADLE_FILE]
}

find_JAVA_PATH() {
  # Find gradle version in $JAVA_PATHS
  # TODO: Improvement: try to use the highest number
  # TODO: Improvement: try to use same distribution as $JAVA_HOME like graalvm, AdoptJDK, azul, coretto...
  for dir in $JAVA_PATHS; do
    if echo "${dir}" | grep -q -e "-${G_JAVA_VERSION}." || echo "${dir}" | grep -q -e "-${G_JAVA_VERSION_ALT}."; then
      if [ -d "${dir}Contents/Home" ]; then
        JAVA_PATH="${dir}Contents/Home"
      elif [ -d "${dir}/Contents/Home" ]; then
        JAVA_PATH="${dir}/Contents/Home"
      fi
      break
    fi
  done
  ### START VALIDATION [JAVA_PATH]
  if [ -z "${JAVA_PATH}" ]; then
    echo "Could not find a JAVA_PATH for G_JAVA_VERSION [${G_JAVA_VERSION}]"
    exit 2
  else
    debug "JAVA_PATH [${JAVA_PATH}]"
  fi
  ### EMD VALIDATION [JAVA_PATH]
}

get_CMD() {
  # GET GRADLE COMMAND
  if [ -e "${CURRENT_DIR}/gradlew" ] && [ ! "$(uname -s)" = "Windows" ]; then
    CMD="${CURRENT_DIR}/gradlew"
  elif [ -e "${CURRENT_DIR}/gradlew.bat" ] && [ "$(uname -s)" = "Windows" ]; then
    CMD="${CURRENT_DIR}/gradlew.bat"
  elif [ -e "${CURRENT_DIR}/gradle/gradlew" ] && [ ! "$(uname -s)" = "Windows" ]; then
    CMD="${CURRENT_DIR}/gradle/gradlew"
  elif [ -e "${CURRENT_DIR}/gradle/gradlew.bat" ] && [ "$(uname -s)" = "Windows" ]; then
    CMD="${CURRENT_DIR}/gradle/gradlew.bat"
  else
    CMD=$(command -v gradle 2>/dev/null)
    if [ -z "$CMD" ]; then
      echo "Error: gradlew, gradlew.bat, or gradle not found"
      exit 1
    else
      debug "CMD [${CMD}]"
    fi
  fi
}
########## FUNCTIONS END ##########

if [ "${GW_UPDATE}" = "true" ] || [ -z "${GW_UPDATE}" ]; then
  update "$@"
fi

debug "DEBUG [${DEBUG}]"
debug "HOME_DIR [${HOME_DIR}]"
debug "CURRENT_DIR [${CURRENT_DIR}]"
debug "SCRIPT_FILE [${SCRIPT_FILE}]"
debug "JAVA_HOME [${JAVA_HOME}]"
debug "JAVA_ROOT_DIRS [${JAVA_ROOT_DIRS}]"

read_JAVA_PATHS
find_GRADLE_FILE
find_G_JAVA_VERSION
find_JAVA_PATH
get_CMD

# RUN GRADLE WITH NEW JAVA PATH && ALL ARGS
debug "RUN [${CMD} $*] with JAVA_HOME [${JAVA_PATH}]"
JAVA_HOME="${JAVA_PATH}" ${CMD} "$@"
